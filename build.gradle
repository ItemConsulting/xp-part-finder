plugins {
  id "java"
  id "maven-publish"
  id "com.enonic.xp.app" version "3.4.0"
  id "com.github.node-gradle.node" version "7.0.2"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

app {
  name = "${appName}"
  displayName = "${appDisplayName}"
  vendorName = "${vendorName}"
  vendorUrl = "${vendorUrl}"
  systemVersion = "${xpVersion}"
}

dependencies {
  compileOnly "com.enonic.xp:core-api:${xpVersion}"
  compileOnly "com.enonic.xp:portal-api:${xpVersion}"

  include "com.enonic.xp:lib-admin:${xpVersion}"
  include "com.enonic.xp:lib-app:${xpVersion}"
  include "com.enonic.xp:lib-content:${xpVersion}"
  include "com.enonic.xp:lib-context:${xpVersion}"
  include "com.enonic.xp:lib-i18n:${xpVersion}"
  include "com.enonic.xp:lib-io:${xpVersion}"
  include "com.enonic.xp:lib-portal:${xpVersion}"
  include "com.enonic.xp:lib-project:${xpVersion}"
  include "com.enonic.xp:lib-repo:${xpVersion}"
  include "com.enonic.xp:lib-schema:${xpVersion}"
  include "com.enonic.xp:lib-websocket:${xpVersion}"
  include "no.item:lib-xp-turbo:1.1.1"
  include "com.github.tineikt:xp-lib-freemarker:2.0.3"
  webjar "org.webjars.npm:hotwired__turbo:8.0.4"
}

repositories {
  mavenLocal()
  mavenCentral()
  xp.enonicRepo()
  maven { url "https://jitpack.io" }
}

node {
  // Whether to download and install a specific Node.js version or not
  // If false, it will use the globally installed Node.js
  // If true, it will download node using above parameters
  // Note that npm is bundled with Node.js
  download = true

  // Version of node to download and install (only used if download is true)
  // It will be unpacked in the workDir
  version = "16.16.0"
}

tasks.withType(Copy).configureEach {
  includeEmptyDirs = false
}

tasks.register("dev", NpmTask) {
  args = [
    "run",
    "watch"
  ]
  dependsOn npmInstall, deploy
  environment = [
    "FORCE_COLOR": "true",
  ]
}

tasks.register("npmCheck", NpmTask) {
  dependsOn npmInstall
  args = [
    "run",
    "check"
  ]
  environment = [
    "FORCE_COLOR": "true",
  ]
}

// If you ALWAYS want to SKIP `test` and `check` tasks on development build, wrap this inside an "if..."
// if (!(project.hasProperty("dev") || project.hasProperty("development"))) {
check.dependsOn npmCheck
// }

tasks.register("npmBuild", NpmTask) {
  args = [
    "run",
    "--silent",
    project.hasProperty("dev") || project.hasProperty("development") ? "build" : "minify"
  ]
  dependsOn npmInstall
  environment = [
    "FORCE_COLOR": "true",
    "LOG_LEVEL_FROM_GRADLE": gradle.startParameter.logLevel.toString(),
    "NODE_ENV": project.hasProperty("dev") || project.hasProperty("development") ? "development" : "production"
  ]
  inputs.dir "src/main/resources"
  outputs.dir "build/resources/main"
}

jar.dependsOn npmBuild

processResources {
  exclude "**/.gitkeep"
  exclude "**/*.json"
  exclude "**/*.png"
  exclude "**/*.ts"
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      groupId group
      artifactId projectName
      version version
    }
  }
}
